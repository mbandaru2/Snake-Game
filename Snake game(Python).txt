	 import turtle\n  
     import time\n  
     import random\n  
     \n  
     delay = 0.1\n  
     \n  
     score = 0\n  
     high_score =0\n  
     \n  
     wn = turtle.Screen() #setting up screen\n  
     wn.title(\ snake game\ )\n  
     wn.bgcolor(\ green\ )\n  
     wn.setup(width=600  height=600)\n  
     wn.tracer(0) #turns off animation(screen updates)\n  
     #snake head\n  
     head = turtle.Turtle()\n  
     head.speed(0)\n  
     head.shape(\ square\ )\n  
     head.color('black')\n  
     head.penup()\n  
     head.goto(0 0)\n  
     head.direction=\ stop\ \n  
     \n  
     #snake food\n  
     food = turtle.Turtle()\n  
     food.speed(0)\n  
     food.shape(\ circle\ )\n  
     food.color('red')\n  
     food.penup()\n  
     food.goto(0 100)\n  
     \n  
     segments = []\n  
     \n  
     #pen\n  
     \n  
     pen=turtle.Turtle()\n  
     pen.speed(0)\n  
     pen.shape('square')\n  
     pen.color('white')\n  
     pen.penup()\n  
     pen.hideturtle()\n  
     pen.goto(0 260)\n  
     pen.write(\ score:0  High Score:0\  align= \ center\  font=('courier' 24 'normal'))\n  
     \n  
     \n  
     \n  
     #function\n  
     def goup():\n  
         if head.direction != \ down\ :\n  
             head.direction =\ up\ \n  
     def godown():\n  
         if head.direction != \ up\ :\n  
             head.direction =\ down\ \n  
     def goright():\n  
         if head.direction != \ left\ :\n  
             head.direction = \ right\ \n  
     def goleft():\n  
         if head.direction != \ right\ :\n  
             head.direction = \ left\ \n  
     \n  
     \n  
     def move():\n  
         if head.direction == 'up':\n  
             y = head.ycor()  #initial Y cor is zero so if input is up it ill move by 20\n  
             head.sety(y +20)\n  
         if head.direction == 'down':\n  
             y = head.ycor()  # initial Y cor is zero so if input is up it ill move by 20\n  
             head.sety(y - 20)\n  
         if head.direction == 'left':\n  
             x = head.xcor()  # initial Y cor is zero so if input is up it ill move by 20\n  
             head.setx(x - 20)\n  
         if head.direction == 'right':\n  
             x = head.xcor()  # initial Y cor is zero so if input is up it ill move by 20\n  
             head.setx(x + 20)\n  
     #keyboard bindings\n  
     wn.listen()\n  
     wn.onkeypress(goup  \ Up\ )\n  
     wn.onkeypress(godown  \ Down\ )\n  
     wn.onkeypress(goleft  \ Left\ )\n  
     wn.onkeypress(goright  \ Right\ )\n  
     \n  
     #main game loop\n  
     while True:\n  
         wn.update()\n  
         \n  
         #check for collison\n  
         \n  
         if head.xcor()> 290 or head.ycor()<-290 or head.xcor()<-290 or head.ycor()>290 :\n  
             time.sleep(1)\n  
             head.goto(0 0)\n  
             head.direction = \ stop\ \n  
             \n  
             #hide segments\n  
             for segments in segments:\n  
                 segment.goto(1000 1000)\n  
             #clear segments\n  
             segments.clear()\n  
             #update score\n  
             score = 0\n  
             pen.clear()\n  
             pen.write(\ score :{} High Score :{}\ .format(score high_score) align= \ center\  font=('courier' 24 'normal'))\n  
             \n  
             \n  
     \n  
         if head.distance(food) < 20: #once collided it can be said by pixel size which is 20\n  
             # move it to random place\n  
             x = random.randint(-290 290)\n  
             y= random.randint(-290 290)\n  
             food.goto(x y)\n  
             \n  
             #adding segment\n  
             new_segment = turtle.Turtle()\n  
             new_segment.speed(0)\n  
             new_segment.color(\ grey\ )\n  
             new_segment.shape(\ square\ )\n  
             new_segment.penup()\n  
             segments.append(new_segment)\n  
             \n  
             #score\n  
             score += 10\n  
             if score> high_score:\n  
                 high_score = score\n  
             pen.clear()\n  
             pen.write(\ score :{} High Score :{}\ .format(score high_score) align= \ center\  font=('courier' 24 'normal'))\n  
             \n  
         # move the end segments\n  
         for index in range(len(segments)-1 0 -1):\n  
             x = segments[index-1].xcor()\n  
             y = segments[index-1].ycor()\n  
             segments[index].goto(x  y)\n  
         if len(segments) >0:\n  
             x = head.xcor()\n  
             y = head.ycor()\n  
             segments[0].goto(x y )\n  
             \n  
             \n  
         move()\n  
         \n  
         # check for body collison\n  
         for segment in segments:\n  
             if segment.distance(head)<20:\n  
                 time.sleep(1)\n  
                 head.goto(0 0)\n  
                 head.direction =\ stop\ \n  
                  #hide segments\n  
                 for segments in segments:\n  
                     segment.goto(1000 1000)\n  
                 #clear segments\n  
                 segments.clear()\n  
                 score = 0\n  
                 pen.clear()\n  
                 pen.write(\ score :{} High Score :{}\ .format(score high_score) align= \ center\  font=('courier' 24 'normal'))\n  
     \n  
         time.sleep(delay)\n  
     \n  
     \n  
     \n  
     wn.mainloop\n  
	